// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="XADC_multiChannels_PreProcess,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.907250,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=310,HLS_SYN_LUT=188}" *)

module XADC_multiChannels_PreProcess (
        ap_clk,
        ap_rst_n,
        M_AXIS_VPVN_data_V_TDATA,
        M_AXIS_VPVN_data_V_TVALID,
        M_AXIS_VPVN_data_V_TREADY,
        M_AXIS_AD1_data_V_TDATA,
        M_AXIS_AD1_data_V_TVALID,
        M_AXIS_AD1_data_V_TREADY,
        M_AXIS_AD5_data_V_TDATA,
        M_AXIS_AD5_data_V_TVALID,
        M_AXIS_AD5_data_V_TREADY,
        M_AXIS_AD6_data_V_TDATA,
        M_AXIS_AD6_data_V_TVALID,
        M_AXIS_AD6_data_V_TREADY,
        M_AXIS_AD9_data_V_TDATA,
        M_AXIS_AD9_data_V_TVALID,
        M_AXIS_AD9_data_V_TREADY,
        M_AXIS_AD13_data_V_TDATA,
        M_AXIS_AD13_data_V_TVALID,
        M_AXIS_AD13_data_V_TREADY,
        M_AXIS_AD15_data_V_TDATA,
        M_AXIS_AD15_data_V_TVALID,
        M_AXIS_AD15_data_V_TREADY,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TID
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_11 = 5'b10001;
parameter    ap_const_lv5_15 = 5'b10101;
parameter    ap_const_lv5_16 = 5'b10110;
parameter    ap_const_lv5_19 = 5'b11001;
parameter    ap_const_lv5_1D = 5'b11101;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_F = 32'b1111;

input   ap_clk;
input   ap_rst_n;
output  [15:0] M_AXIS_VPVN_data_V_TDATA;
output   M_AXIS_VPVN_data_V_TVALID;
input   M_AXIS_VPVN_data_V_TREADY;
output  [15:0] M_AXIS_AD1_data_V_TDATA;
output   M_AXIS_AD1_data_V_TVALID;
input   M_AXIS_AD1_data_V_TREADY;
output  [15:0] M_AXIS_AD5_data_V_TDATA;
output   M_AXIS_AD5_data_V_TVALID;
input   M_AXIS_AD5_data_V_TREADY;
output  [15:0] M_AXIS_AD6_data_V_TDATA;
output   M_AXIS_AD6_data_V_TVALID;
input   M_AXIS_AD6_data_V_TREADY;
output  [15:0] M_AXIS_AD9_data_V_TDATA;
output   M_AXIS_AD9_data_V_TVALID;
input   M_AXIS_AD9_data_V_TREADY;
output  [15:0] M_AXIS_AD13_data_V_TDATA;
output   M_AXIS_AD13_data_V_TVALID;
input   M_AXIS_AD13_data_V_TREADY;
output  [15:0] M_AXIS_AD15_data_V_TDATA;
output   M_AXIS_AD15_data_V_TVALID;
input   M_AXIS_AD15_data_V_TREADY;
input  [15:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input  [4:0] S_AXIS_TID;

reg    ap_rst_n_inv;
reg   [15:0] M_AXIS_VPVN_data_V_1_data_out;
reg    M_AXIS_VPVN_data_V_1_vld_in;
wire    M_AXIS_VPVN_data_V_1_vld_out;
wire    M_AXIS_VPVN_data_V_1_ack_in;
wire    M_AXIS_VPVN_data_V_1_ack_out;
reg   [15:0] M_AXIS_VPVN_data_V_1_payload_A;
reg   [15:0] M_AXIS_VPVN_data_V_1_payload_B;
reg    M_AXIS_VPVN_data_V_1_sel_rd;
reg    M_AXIS_VPVN_data_V_1_sel_wr;
wire    M_AXIS_VPVN_data_V_1_sel;
wire    M_AXIS_VPVN_data_V_1_load_A;
wire    M_AXIS_VPVN_data_V_1_load_B;
reg   [1:0] M_AXIS_VPVN_data_V_1_state;
wire    M_AXIS_VPVN_data_V_1_state_cmp_full;
reg   [15:0] M_AXIS_AD1_data_V_1_data_out;
reg    M_AXIS_AD1_data_V_1_vld_in;
wire    M_AXIS_AD1_data_V_1_vld_out;
wire    M_AXIS_AD1_data_V_1_ack_in;
wire    M_AXIS_AD1_data_V_1_ack_out;
reg   [15:0] M_AXIS_AD1_data_V_1_payload_A;
reg   [15:0] M_AXIS_AD1_data_V_1_payload_B;
reg    M_AXIS_AD1_data_V_1_sel_rd;
reg    M_AXIS_AD1_data_V_1_sel_wr;
wire    M_AXIS_AD1_data_V_1_sel;
wire    M_AXIS_AD1_data_V_1_load_A;
wire    M_AXIS_AD1_data_V_1_load_B;
reg   [1:0] M_AXIS_AD1_data_V_1_state;
wire    M_AXIS_AD1_data_V_1_state_cmp_full;
reg   [15:0] M_AXIS_AD5_data_V_1_data_out;
reg    M_AXIS_AD5_data_V_1_vld_in;
wire    M_AXIS_AD5_data_V_1_vld_out;
wire    M_AXIS_AD5_data_V_1_ack_in;
wire    M_AXIS_AD5_data_V_1_ack_out;
reg   [15:0] M_AXIS_AD5_data_V_1_payload_A;
reg   [15:0] M_AXIS_AD5_data_V_1_payload_B;
reg    M_AXIS_AD5_data_V_1_sel_rd;
reg    M_AXIS_AD5_data_V_1_sel_wr;
wire    M_AXIS_AD5_data_V_1_sel;
wire    M_AXIS_AD5_data_V_1_load_A;
wire    M_AXIS_AD5_data_V_1_load_B;
reg   [1:0] M_AXIS_AD5_data_V_1_state;
wire    M_AXIS_AD5_data_V_1_state_cmp_full;
reg   [15:0] M_AXIS_AD6_data_V_1_data_out;
reg    M_AXIS_AD6_data_V_1_vld_in;
wire    M_AXIS_AD6_data_V_1_vld_out;
wire    M_AXIS_AD6_data_V_1_ack_in;
wire    M_AXIS_AD6_data_V_1_ack_out;
reg   [15:0] M_AXIS_AD6_data_V_1_payload_A;
reg   [15:0] M_AXIS_AD6_data_V_1_payload_B;
reg    M_AXIS_AD6_data_V_1_sel_rd;
reg    M_AXIS_AD6_data_V_1_sel_wr;
wire    M_AXIS_AD6_data_V_1_sel;
wire    M_AXIS_AD6_data_V_1_load_A;
wire    M_AXIS_AD6_data_V_1_load_B;
reg   [1:0] M_AXIS_AD6_data_V_1_state;
wire    M_AXIS_AD6_data_V_1_state_cmp_full;
reg   [15:0] M_AXIS_AD9_data_V_1_data_out;
reg    M_AXIS_AD9_data_V_1_vld_in;
wire    M_AXIS_AD9_data_V_1_vld_out;
wire    M_AXIS_AD9_data_V_1_ack_in;
wire    M_AXIS_AD9_data_V_1_ack_out;
reg   [15:0] M_AXIS_AD9_data_V_1_payload_A;
reg   [15:0] M_AXIS_AD9_data_V_1_payload_B;
reg    M_AXIS_AD9_data_V_1_sel_rd;
reg    M_AXIS_AD9_data_V_1_sel_wr;
wire    M_AXIS_AD9_data_V_1_sel;
wire    M_AXIS_AD9_data_V_1_load_A;
wire    M_AXIS_AD9_data_V_1_load_B;
reg   [1:0] M_AXIS_AD9_data_V_1_state;
wire    M_AXIS_AD9_data_V_1_state_cmp_full;
reg   [15:0] M_AXIS_AD13_data_V_1_data_out;
reg    M_AXIS_AD13_data_V_1_vld_in;
wire    M_AXIS_AD13_data_V_1_vld_out;
wire    M_AXIS_AD13_data_V_1_ack_in;
wire    M_AXIS_AD13_data_V_1_ack_out;
reg   [15:0] M_AXIS_AD13_data_V_1_payload_A;
reg   [15:0] M_AXIS_AD13_data_V_1_payload_B;
reg    M_AXIS_AD13_data_V_1_sel_rd;
reg    M_AXIS_AD13_data_V_1_sel_wr;
wire    M_AXIS_AD13_data_V_1_sel;
wire    M_AXIS_AD13_data_V_1_load_A;
wire    M_AXIS_AD13_data_V_1_load_B;
reg   [1:0] M_AXIS_AD13_data_V_1_state;
wire    M_AXIS_AD13_data_V_1_state_cmp_full;
reg   [15:0] M_AXIS_AD15_data_V_1_data_out;
reg    M_AXIS_AD15_data_V_1_vld_in;
wire    M_AXIS_AD15_data_V_1_vld_out;
wire    M_AXIS_AD15_data_V_1_ack_in;
wire    M_AXIS_AD15_data_V_1_ack_out;
reg   [15:0] M_AXIS_AD15_data_V_1_payload_A;
reg   [15:0] M_AXIS_AD15_data_V_1_payload_B;
reg    M_AXIS_AD15_data_V_1_sel_rd;
reg    M_AXIS_AD15_data_V_1_sel_wr;
wire    M_AXIS_AD15_data_V_1_sel;
wire    M_AXIS_AD15_data_V_1_load_A;
wire    M_AXIS_AD15_data_V_1_load_B;
reg   [1:0] M_AXIS_AD15_data_V_1_state;
wire    M_AXIS_AD15_data_V_1_state_cmp_full;
reg   [15:0] S_AXIS_data_V_0_data_out;
wire    S_AXIS_data_V_0_vld_in;
wire    S_AXIS_data_V_0_vld_out;
wire    S_AXIS_data_V_0_ack_in;
reg    S_AXIS_data_V_0_ack_out;
reg   [15:0] S_AXIS_data_V_0_payload_A;
reg   [15:0] S_AXIS_data_V_0_payload_B;
reg    S_AXIS_data_V_0_sel_rd;
reg    S_AXIS_data_V_0_sel_wr;
wire    S_AXIS_data_V_0_sel;
wire    S_AXIS_data_V_0_load_A;
wire    S_AXIS_data_V_0_load_B;
reg   [1:0] S_AXIS_data_V_0_state;
wire    S_AXIS_data_V_0_state_cmp_full;
reg   [4:0] S_AXIS_id_V_0_data_out;
wire    S_AXIS_id_V_0_vld_in;
wire    S_AXIS_id_V_0_vld_out;
wire    S_AXIS_id_V_0_ack_in;
reg    S_AXIS_id_V_0_ack_out;
reg   [4:0] S_AXIS_id_V_0_payload_A;
reg   [4:0] S_AXIS_id_V_0_payload_B;
reg    S_AXIS_id_V_0_sel_rd;
reg    S_AXIS_id_V_0_sel_wr;
wire    S_AXIS_id_V_0_sel;
wire    S_AXIS_id_V_0_load_A;
wire    S_AXIS_id_V_0_load_B;
reg   [1:0] S_AXIS_id_V_0_state;
wire    S_AXIS_id_V_0_state_cmp_full;
reg    M_AXIS_VPVN_data_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state2;
wire   [4:0] idTmp_V_fu_123_p1;
wire   [0:0] ap_CS_fsm_state3;
reg   [4:0] idTmp_V_reg_148;
reg    M_AXIS_AD1_data_V_TDATA_blk_n;
reg    M_AXIS_AD5_data_V_TDATA_blk_n;
reg    M_AXIS_AD6_data_V_TDATA_blk_n;
reg    M_AXIS_AD9_data_V_TDATA_blk_n;
reg    M_AXIS_AD13_data_V_TDATA_blk_n;
reg    M_AXIS_AD15_data_V_TDATA_blk_n;
reg    S_AXIS_TDATA_blk_n;
wire  signed [15:0] r_V_fu_137_p1;
reg    ap_condition_664;
wire   [11:0] tmp_1_fu_127_p4;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 M_AXIS_VPVN_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_VPVN_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_VPVN_data_V_1_state = 2'b00;
#0 M_AXIS_AD1_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_AD1_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_AD1_data_V_1_state = 2'b00;
#0 M_AXIS_AD5_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_AD5_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_AD5_data_V_1_state = 2'b00;
#0 M_AXIS_AD6_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_AD6_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_AD6_data_V_1_state = 2'b00;
#0 M_AXIS_AD9_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_AD9_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_AD9_data_V_1_state = 2'b00;
#0 M_AXIS_AD13_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_AD13_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_AD13_data_V_1_state = 2'b00;
#0 M_AXIS_AD15_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_AD15_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_AD15_data_V_1_state = 2'b00;
#0 S_AXIS_data_V_0_sel_rd = 1'b0;
#0 S_AXIS_data_V_0_sel_wr = 1'b0;
#0 S_AXIS_data_V_0_state = 2'b00;
#0 S_AXIS_id_V_0_sel_rd = 1'b0;
#0 S_AXIS_id_V_0_sel_wr = 1'b0;
#0 S_AXIS_id_V_0_state = 2'b00;
#0 ap_CS_fsm = 3'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD13_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD13_data_V_1_ack_out) & (1'b1 == M_AXIS_AD13_data_V_1_vld_out))) begin
            M_AXIS_AD13_data_V_1_sel_rd <= ~M_AXIS_AD13_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD13_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD13_data_V_1_vld_in) & (1'b1 == M_AXIS_AD13_data_V_1_ack_in))) begin
            M_AXIS_AD13_data_V_1_sel_wr <= ~M_AXIS_AD13_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD13_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_AD13_data_V_1_vld_in) & (1'b1 == M_AXIS_AD13_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD13_data_V_1_state)) | ((1'b0 == M_AXIS_AD13_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD13_data_V_1_state)))) begin
            M_AXIS_AD13_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_AD13_data_V_1_vld_in) & (1'b0 == M_AXIS_AD13_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD13_data_V_1_state)) | ((1'b0 == M_AXIS_AD13_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD13_data_V_1_state)))) begin
            M_AXIS_AD13_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_AD13_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD13_data_V_1_state)) | ((1'b1 == M_AXIS_AD13_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD13_data_V_1_state)) | ((ap_const_lv2_3 == M_AXIS_AD13_data_V_1_state) & ~((1'b1 == M_AXIS_AD13_data_V_1_vld_in) & (1'b0 == M_AXIS_AD13_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_AD13_data_V_1_vld_in) & (1'b1 == M_AXIS_AD13_data_V_1_ack_out))))) begin
            M_AXIS_AD13_data_V_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_AD13_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD15_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD15_data_V_1_ack_out) & (1'b1 == M_AXIS_AD15_data_V_1_vld_out))) begin
            M_AXIS_AD15_data_V_1_sel_rd <= ~M_AXIS_AD15_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD15_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD15_data_V_1_vld_in) & (1'b1 == M_AXIS_AD15_data_V_1_ack_in))) begin
            M_AXIS_AD15_data_V_1_sel_wr <= ~M_AXIS_AD15_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD15_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_AD15_data_V_1_vld_in) & (1'b1 == M_AXIS_AD15_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD15_data_V_1_state)) | ((1'b0 == M_AXIS_AD15_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD15_data_V_1_state)))) begin
            M_AXIS_AD15_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_AD15_data_V_1_vld_in) & (1'b0 == M_AXIS_AD15_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD15_data_V_1_state)) | ((1'b0 == M_AXIS_AD15_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD15_data_V_1_state)))) begin
            M_AXIS_AD15_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_AD15_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD15_data_V_1_state)) | ((1'b1 == M_AXIS_AD15_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD15_data_V_1_state)) | ((ap_const_lv2_3 == M_AXIS_AD15_data_V_1_state) & ~((1'b1 == M_AXIS_AD15_data_V_1_vld_in) & (1'b0 == M_AXIS_AD15_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_AD15_data_V_1_vld_in) & (1'b1 == M_AXIS_AD15_data_V_1_ack_out))))) begin
            M_AXIS_AD15_data_V_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_AD15_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD1_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD1_data_V_1_ack_out) & (1'b1 == M_AXIS_AD1_data_V_1_vld_out))) begin
            M_AXIS_AD1_data_V_1_sel_rd <= ~M_AXIS_AD1_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD1_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD1_data_V_1_vld_in) & (1'b1 == M_AXIS_AD1_data_V_1_ack_in))) begin
            M_AXIS_AD1_data_V_1_sel_wr <= ~M_AXIS_AD1_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD1_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_AD1_data_V_1_vld_in) & (1'b1 == M_AXIS_AD1_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD1_data_V_1_state)) | ((1'b0 == M_AXIS_AD1_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD1_data_V_1_state)))) begin
            M_AXIS_AD1_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_AD1_data_V_1_vld_in) & (1'b0 == M_AXIS_AD1_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD1_data_V_1_state)) | ((1'b0 == M_AXIS_AD1_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD1_data_V_1_state)))) begin
            M_AXIS_AD1_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_AD1_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD1_data_V_1_state)) | ((1'b1 == M_AXIS_AD1_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD1_data_V_1_state)) | ((ap_const_lv2_3 == M_AXIS_AD1_data_V_1_state) & ~((1'b1 == M_AXIS_AD1_data_V_1_vld_in) & (1'b0 == M_AXIS_AD1_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_AD1_data_V_1_vld_in) & (1'b1 == M_AXIS_AD1_data_V_1_ack_out))))) begin
            M_AXIS_AD1_data_V_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_AD1_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD5_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD5_data_V_1_ack_out) & (1'b1 == M_AXIS_AD5_data_V_1_vld_out))) begin
            M_AXIS_AD5_data_V_1_sel_rd <= ~M_AXIS_AD5_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD5_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD5_data_V_1_vld_in) & (1'b1 == M_AXIS_AD5_data_V_1_ack_in))) begin
            M_AXIS_AD5_data_V_1_sel_wr <= ~M_AXIS_AD5_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD5_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_AD5_data_V_1_vld_in) & (1'b1 == M_AXIS_AD5_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD5_data_V_1_state)) | ((1'b0 == M_AXIS_AD5_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD5_data_V_1_state)))) begin
            M_AXIS_AD5_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_AD5_data_V_1_vld_in) & (1'b0 == M_AXIS_AD5_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD5_data_V_1_state)) | ((1'b0 == M_AXIS_AD5_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD5_data_V_1_state)))) begin
            M_AXIS_AD5_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_AD5_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD5_data_V_1_state)) | ((1'b1 == M_AXIS_AD5_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD5_data_V_1_state)) | ((ap_const_lv2_3 == M_AXIS_AD5_data_V_1_state) & ~((1'b1 == M_AXIS_AD5_data_V_1_vld_in) & (1'b0 == M_AXIS_AD5_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_AD5_data_V_1_vld_in) & (1'b1 == M_AXIS_AD5_data_V_1_ack_out))))) begin
            M_AXIS_AD5_data_V_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_AD5_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD6_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD6_data_V_1_ack_out) & (1'b1 == M_AXIS_AD6_data_V_1_vld_out))) begin
            M_AXIS_AD6_data_V_1_sel_rd <= ~M_AXIS_AD6_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD6_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD6_data_V_1_vld_in) & (1'b1 == M_AXIS_AD6_data_V_1_ack_in))) begin
            M_AXIS_AD6_data_V_1_sel_wr <= ~M_AXIS_AD6_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD6_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_AD6_data_V_1_vld_in) & (1'b1 == M_AXIS_AD6_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD6_data_V_1_state)) | ((1'b0 == M_AXIS_AD6_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD6_data_V_1_state)))) begin
            M_AXIS_AD6_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_AD6_data_V_1_vld_in) & (1'b0 == M_AXIS_AD6_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD6_data_V_1_state)) | ((1'b0 == M_AXIS_AD6_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD6_data_V_1_state)))) begin
            M_AXIS_AD6_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_AD6_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD6_data_V_1_state)) | ((1'b1 == M_AXIS_AD6_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD6_data_V_1_state)) | ((ap_const_lv2_3 == M_AXIS_AD6_data_V_1_state) & ~((1'b1 == M_AXIS_AD6_data_V_1_vld_in) & (1'b0 == M_AXIS_AD6_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_AD6_data_V_1_vld_in) & (1'b1 == M_AXIS_AD6_data_V_1_ack_out))))) begin
            M_AXIS_AD6_data_V_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_AD6_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD9_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD9_data_V_1_ack_out) & (1'b1 == M_AXIS_AD9_data_V_1_vld_out))) begin
            M_AXIS_AD9_data_V_1_sel_rd <= ~M_AXIS_AD9_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD9_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_AD9_data_V_1_vld_in) & (1'b1 == M_AXIS_AD9_data_V_1_ack_in))) begin
            M_AXIS_AD9_data_V_1_sel_wr <= ~M_AXIS_AD9_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_AD9_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_AD9_data_V_1_vld_in) & (1'b1 == M_AXIS_AD9_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD9_data_V_1_state)) | ((1'b0 == M_AXIS_AD9_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD9_data_V_1_state)))) begin
            M_AXIS_AD9_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_AD9_data_V_1_vld_in) & (1'b0 == M_AXIS_AD9_data_V_1_ack_out) & (ap_const_lv2_3 == M_AXIS_AD9_data_V_1_state)) | ((1'b0 == M_AXIS_AD9_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD9_data_V_1_state)))) begin
            M_AXIS_AD9_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_AD9_data_V_1_vld_in) & (ap_const_lv2_2 == M_AXIS_AD9_data_V_1_state)) | ((1'b1 == M_AXIS_AD9_data_V_1_ack_out) & (ap_const_lv2_1 == M_AXIS_AD9_data_V_1_state)) | ((ap_const_lv2_3 == M_AXIS_AD9_data_V_1_state) & ~((1'b1 == M_AXIS_AD9_data_V_1_vld_in) & (1'b0 == M_AXIS_AD9_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_AD9_data_V_1_vld_in) & (1'b1 == M_AXIS_AD9_data_V_1_ack_out))))) begin
            M_AXIS_AD9_data_V_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_AD9_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_VPVN_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_VPVN_data_V_1_ack_out) & (1'b1 == M_AXIS_VPVN_data_V_1_vld_out))) begin
            M_AXIS_VPVN_data_V_1_sel_rd <= ~M_AXIS_VPVN_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_VPVN_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_VPVN_data_V_1_vld_in) & (1'b1 == M_AXIS_VPVN_data_V_1_ack_in))) begin
            M_AXIS_VPVN_data_V_1_sel_wr <= ~M_AXIS_VPVN_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_VPVN_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == M_AXIS_VPVN_data_V_1_vld_in) & (1'b1 == M_AXIS_VPVN_data_V_1_ack_out) & (M_AXIS_VPVN_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == M_AXIS_VPVN_data_V_1_vld_in) & (M_AXIS_VPVN_data_V_1_state == ap_const_lv2_2)))) begin
            M_AXIS_VPVN_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == M_AXIS_VPVN_data_V_1_vld_in) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_out) & (M_AXIS_VPVN_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == M_AXIS_VPVN_data_V_1_ack_out) & (M_AXIS_VPVN_data_V_1_state == ap_const_lv2_1)))) begin
            M_AXIS_VPVN_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == M_AXIS_VPVN_data_V_1_vld_in) & (M_AXIS_VPVN_data_V_1_state == ap_const_lv2_2)) | ((1'b1 == M_AXIS_VPVN_data_V_1_ack_out) & (M_AXIS_VPVN_data_V_1_state == ap_const_lv2_1)) | ((M_AXIS_VPVN_data_V_1_state == ap_const_lv2_3) & ~((1'b1 == M_AXIS_VPVN_data_V_1_vld_in) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_VPVN_data_V_1_vld_in) & (1'b1 == M_AXIS_VPVN_data_V_1_ack_out))))) begin
            M_AXIS_VPVN_data_V_1_state <= ap_const_lv2_3;
        end else begin
            M_AXIS_VPVN_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_data_V_0_ack_out) & (1'b1 == S_AXIS_data_V_0_vld_out))) begin
            S_AXIS_data_V_0_sel_rd <= ~S_AXIS_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_data_V_0_vld_in) & (1'b1 == S_AXIS_data_V_0_ack_in))) begin
            S_AXIS_data_V_0_sel_wr <= ~S_AXIS_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_data_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == S_AXIS_data_V_0_vld_in) & (1'b1 == S_AXIS_data_V_0_ack_out) & (ap_const_lv2_3 == S_AXIS_data_V_0_state)) | ((1'b0 == S_AXIS_data_V_0_vld_in) & (ap_const_lv2_2 == S_AXIS_data_V_0_state)))) begin
            S_AXIS_data_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == S_AXIS_data_V_0_vld_in) & (1'b0 == S_AXIS_data_V_0_ack_out) & (ap_const_lv2_3 == S_AXIS_data_V_0_state)) | ((1'b0 == S_AXIS_data_V_0_ack_out) & (ap_const_lv2_1 == S_AXIS_data_V_0_state)))) begin
            S_AXIS_data_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == S_AXIS_data_V_0_vld_in) & (ap_const_lv2_2 == S_AXIS_data_V_0_state)) | ((1'b1 == S_AXIS_data_V_0_ack_out) & (ap_const_lv2_1 == S_AXIS_data_V_0_state)) | ((ap_const_lv2_3 == S_AXIS_data_V_0_state) & ~((1'b1 == S_AXIS_data_V_0_vld_in) & (1'b0 == S_AXIS_data_V_0_ack_out)) & ~((1'b0 == S_AXIS_data_V_0_vld_in) & (1'b1 == S_AXIS_data_V_0_ack_out))))) begin
            S_AXIS_data_V_0_state <= ap_const_lv2_3;
        end else begin
            S_AXIS_data_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_id_V_0_ack_out) & (1'b1 == S_AXIS_id_V_0_vld_out))) begin
            S_AXIS_id_V_0_sel_rd <= ~S_AXIS_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_id_V_0_vld_in) & (1'b1 == S_AXIS_id_V_0_ack_in))) begin
            S_AXIS_id_V_0_sel_wr <= ~S_AXIS_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_id_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == S_AXIS_id_V_0_vld_in) & (1'b1 == S_AXIS_id_V_0_ack_out) & (ap_const_lv2_3 == S_AXIS_id_V_0_state)) | ((1'b0 == S_AXIS_id_V_0_vld_in) & (ap_const_lv2_2 == S_AXIS_id_V_0_state)))) begin
            S_AXIS_id_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == S_AXIS_id_V_0_vld_in) & (1'b0 == S_AXIS_id_V_0_ack_out) & (ap_const_lv2_3 == S_AXIS_id_V_0_state)) | ((1'b0 == S_AXIS_id_V_0_ack_out) & (ap_const_lv2_1 == S_AXIS_id_V_0_state)))) begin
            S_AXIS_id_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == S_AXIS_id_V_0_vld_in) & (ap_const_lv2_2 == S_AXIS_id_V_0_state)) | ((1'b1 == S_AXIS_id_V_0_ack_out) & (ap_const_lv2_1 == S_AXIS_id_V_0_state)) | ((ap_const_lv2_3 == S_AXIS_id_V_0_state) & ~((1'b1 == S_AXIS_id_V_0_vld_in) & (1'b0 == S_AXIS_id_V_0_ack_out)) & ~((1'b0 == S_AXIS_id_V_0_vld_in) & (1'b1 == S_AXIS_id_V_0_ack_out))))) begin
            S_AXIS_id_V_0_state <= ap_const_lv2_3;
        end else begin
            S_AXIS_id_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD13_data_V_1_load_A)) begin
        M_AXIS_AD13_data_V_1_payload_A <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD13_data_V_1_load_B)) begin
        M_AXIS_AD13_data_V_1_payload_B <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD15_data_V_1_load_A)) begin
        M_AXIS_AD15_data_V_1_payload_A <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD15_data_V_1_load_B)) begin
        M_AXIS_AD15_data_V_1_payload_B <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD1_data_V_1_load_A)) begin
        M_AXIS_AD1_data_V_1_payload_A <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD1_data_V_1_load_B)) begin
        M_AXIS_AD1_data_V_1_payload_B <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD5_data_V_1_load_A)) begin
        M_AXIS_AD5_data_V_1_payload_A <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD5_data_V_1_load_B)) begin
        M_AXIS_AD5_data_V_1_payload_B <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD6_data_V_1_load_A)) begin
        M_AXIS_AD6_data_V_1_payload_A <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD6_data_V_1_load_B)) begin
        M_AXIS_AD6_data_V_1_payload_B <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD9_data_V_1_load_A)) begin
        M_AXIS_AD9_data_V_1_payload_A <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_AD9_data_V_1_load_B)) begin
        M_AXIS_AD9_data_V_1_payload_B <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_VPVN_data_V_1_load_A)) begin
        M_AXIS_VPVN_data_V_1_payload_A <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_VPVN_data_V_1_load_B)) begin
        M_AXIS_VPVN_data_V_1_payload_B <= r_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_data_V_0_load_A)) begin
        S_AXIS_data_V_0_payload_A <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_data_V_0_load_B)) begin
        S_AXIS_data_V_0_payload_B <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_id_V_0_load_A)) begin
        S_AXIS_id_V_0_payload_A <= S_AXIS_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_id_V_0_load_B)) begin
        S_AXIS_id_V_0_payload_B <= S_AXIS_TID;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        idTmp_V_reg_148 <= S_AXIS_id_V_0_data_out;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_AD13_data_V_1_sel)) begin
        M_AXIS_AD13_data_V_1_data_out = M_AXIS_AD13_data_V_1_payload_B;
    end else begin
        M_AXIS_AD13_data_V_1_data_out = M_AXIS_AD13_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_1D) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        M_AXIS_AD13_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_AD13_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_1D)) | ((1'b1 == ap_CS_fsm_state3) & (idTmp_V_reg_148 == ap_const_lv5_1D)))) begin
        M_AXIS_AD13_data_V_TDATA_blk_n = M_AXIS_AD13_data_V_1_state[1'b1];
    end else begin
        M_AXIS_AD13_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_AD15_data_V_1_sel)) begin
        M_AXIS_AD15_data_V_1_data_out = M_AXIS_AD15_data_V_1_payload_B;
    end else begin
        M_AXIS_AD15_data_V_1_data_out = M_AXIS_AD15_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_1F) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        M_AXIS_AD15_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_AD15_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_1F)) | ((1'b1 == ap_CS_fsm_state3) & (idTmp_V_reg_148 == ap_const_lv5_1F)))) begin
        M_AXIS_AD15_data_V_TDATA_blk_n = M_AXIS_AD15_data_V_1_state[1'b1];
    end else begin
        M_AXIS_AD15_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_AD1_data_V_1_sel)) begin
        M_AXIS_AD1_data_V_1_data_out = M_AXIS_AD1_data_V_1_payload_B;
    end else begin
        M_AXIS_AD1_data_V_1_data_out = M_AXIS_AD1_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_11) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        M_AXIS_AD1_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_AD1_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_11)) | ((1'b1 == ap_CS_fsm_state3) & (idTmp_V_reg_148 == ap_const_lv5_11)))) begin
        M_AXIS_AD1_data_V_TDATA_blk_n = M_AXIS_AD1_data_V_1_state[1'b1];
    end else begin
        M_AXIS_AD1_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_AD5_data_V_1_sel)) begin
        M_AXIS_AD5_data_V_1_data_out = M_AXIS_AD5_data_V_1_payload_B;
    end else begin
        M_AXIS_AD5_data_V_1_data_out = M_AXIS_AD5_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_15) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        M_AXIS_AD5_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_AD5_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_15)) | ((1'b1 == ap_CS_fsm_state3) & (idTmp_V_reg_148 == ap_const_lv5_15)))) begin
        M_AXIS_AD5_data_V_TDATA_blk_n = M_AXIS_AD5_data_V_1_state[1'b1];
    end else begin
        M_AXIS_AD5_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_AD6_data_V_1_sel)) begin
        M_AXIS_AD6_data_V_1_data_out = M_AXIS_AD6_data_V_1_payload_B;
    end else begin
        M_AXIS_AD6_data_V_1_data_out = M_AXIS_AD6_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_16) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        M_AXIS_AD6_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_AD6_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_16)) | ((1'b1 == ap_CS_fsm_state3) & (idTmp_V_reg_148 == ap_const_lv5_16)))) begin
        M_AXIS_AD6_data_V_TDATA_blk_n = M_AXIS_AD6_data_V_1_state[1'b1];
    end else begin
        M_AXIS_AD6_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_AD9_data_V_1_sel)) begin
        M_AXIS_AD9_data_V_1_data_out = M_AXIS_AD9_data_V_1_payload_B;
    end else begin
        M_AXIS_AD9_data_V_1_data_out = M_AXIS_AD9_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_19) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        M_AXIS_AD9_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_AD9_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_19)) | ((1'b1 == ap_CS_fsm_state3) & (idTmp_V_reg_148 == ap_const_lv5_19)))) begin
        M_AXIS_AD9_data_V_TDATA_blk_n = M_AXIS_AD9_data_V_1_state[1'b1];
    end else begin
        M_AXIS_AD9_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_VPVN_data_V_1_sel)) begin
        M_AXIS_VPVN_data_V_1_data_out = M_AXIS_VPVN_data_V_1_payload_B;
    end else begin
        M_AXIS_VPVN_data_V_1_data_out = M_AXIS_VPVN_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_3) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        M_AXIS_VPVN_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_VPVN_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (idTmp_V_fu_123_p1 == ap_const_lv5_3)) | ((1'b1 == ap_CS_fsm_state3) & (ap_const_lv5_3 == idTmp_V_reg_148)))) begin
        M_AXIS_VPVN_data_V_TDATA_blk_n = M_AXIS_VPVN_data_V_1_state[1'b1];
    end else begin
        M_AXIS_VPVN_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        S_AXIS_TDATA_blk_n = S_AXIS_data_V_0_state[1'b0];
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        S_AXIS_data_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_data_V_0_sel)) begin
        S_AXIS_data_V_0_data_out = S_AXIS_data_V_0_payload_B;
    end else begin
        S_AXIS_data_V_0_data_out = S_AXIS_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in))))) begin
        S_AXIS_id_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_id_V_0_sel)) begin
        S_AXIS_id_V_0_data_out = S_AXIS_id_V_0_payload_B;
    end else begin
        S_AXIS_id_V_0_data_out = S_AXIS_id_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (~((S_AXIS_data_V_0_vld_out == 1'b0) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((idTmp_V_fu_123_p1 == ap_const_lv5_3) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~((ap_condition_664 == 1'b1) | ((idTmp_V_reg_148 == ap_const_lv5_1F) & (1'b0 == M_AXIS_AD15_data_V_1_ack_in)) | ((idTmp_V_reg_148 == ap_const_lv5_1D) & (1'b0 == M_AXIS_AD13_data_V_1_ack_in)) | ((idTmp_V_reg_148 == ap_const_lv5_19) & (1'b0 == M_AXIS_AD9_data_V_1_ack_in)) | ((idTmp_V_reg_148 == ap_const_lv5_16) & (1'b0 == M_AXIS_AD6_data_V_1_ack_in)) | ((idTmp_V_reg_148 == ap_const_lv5_15) & (1'b0 == M_AXIS_AD5_data_V_1_ack_in)) | ((idTmp_V_reg_148 == ap_const_lv5_11) & (1'b0 == M_AXIS_AD1_data_V_1_ack_in)) | ((ap_const_lv5_3 == idTmp_V_reg_148) & (1'b0 == M_AXIS_VPVN_data_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_AD13_data_V_1_ack_in = M_AXIS_AD13_data_V_1_state[1'b1];

assign M_AXIS_AD13_data_V_1_ack_out = M_AXIS_AD13_data_V_TREADY;

assign M_AXIS_AD13_data_V_1_load_A = (M_AXIS_AD13_data_V_1_state_cmp_full & ~M_AXIS_AD13_data_V_1_sel_wr);

assign M_AXIS_AD13_data_V_1_load_B = (M_AXIS_AD13_data_V_1_sel_wr & M_AXIS_AD13_data_V_1_state_cmp_full);

assign M_AXIS_AD13_data_V_1_sel = M_AXIS_AD13_data_V_1_sel_rd;

assign M_AXIS_AD13_data_V_1_state_cmp_full = ((M_AXIS_AD13_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_AD13_data_V_1_vld_out = M_AXIS_AD13_data_V_1_state[1'b0];

assign M_AXIS_AD13_data_V_TDATA = M_AXIS_AD13_data_V_1_data_out;

assign M_AXIS_AD13_data_V_TVALID = M_AXIS_AD13_data_V_1_state[1'b0];

assign M_AXIS_AD15_data_V_1_ack_in = M_AXIS_AD15_data_V_1_state[1'b1];

assign M_AXIS_AD15_data_V_1_ack_out = M_AXIS_AD15_data_V_TREADY;

assign M_AXIS_AD15_data_V_1_load_A = (M_AXIS_AD15_data_V_1_state_cmp_full & ~M_AXIS_AD15_data_V_1_sel_wr);

assign M_AXIS_AD15_data_V_1_load_B = (M_AXIS_AD15_data_V_1_sel_wr & M_AXIS_AD15_data_V_1_state_cmp_full);

assign M_AXIS_AD15_data_V_1_sel = M_AXIS_AD15_data_V_1_sel_rd;

assign M_AXIS_AD15_data_V_1_state_cmp_full = ((M_AXIS_AD15_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_AD15_data_V_1_vld_out = M_AXIS_AD15_data_V_1_state[1'b0];

assign M_AXIS_AD15_data_V_TDATA = M_AXIS_AD15_data_V_1_data_out;

assign M_AXIS_AD15_data_V_TVALID = M_AXIS_AD15_data_V_1_state[1'b0];

assign M_AXIS_AD1_data_V_1_ack_in = M_AXIS_AD1_data_V_1_state[1'b1];

assign M_AXIS_AD1_data_V_1_ack_out = M_AXIS_AD1_data_V_TREADY;

assign M_AXIS_AD1_data_V_1_load_A = (M_AXIS_AD1_data_V_1_state_cmp_full & ~M_AXIS_AD1_data_V_1_sel_wr);

assign M_AXIS_AD1_data_V_1_load_B = (M_AXIS_AD1_data_V_1_sel_wr & M_AXIS_AD1_data_V_1_state_cmp_full);

assign M_AXIS_AD1_data_V_1_sel = M_AXIS_AD1_data_V_1_sel_rd;

assign M_AXIS_AD1_data_V_1_state_cmp_full = ((M_AXIS_AD1_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_AD1_data_V_1_vld_out = M_AXIS_AD1_data_V_1_state[1'b0];

assign M_AXIS_AD1_data_V_TDATA = M_AXIS_AD1_data_V_1_data_out;

assign M_AXIS_AD1_data_V_TVALID = M_AXIS_AD1_data_V_1_state[1'b0];

assign M_AXIS_AD5_data_V_1_ack_in = M_AXIS_AD5_data_V_1_state[1'b1];

assign M_AXIS_AD5_data_V_1_ack_out = M_AXIS_AD5_data_V_TREADY;

assign M_AXIS_AD5_data_V_1_load_A = (M_AXIS_AD5_data_V_1_state_cmp_full & ~M_AXIS_AD5_data_V_1_sel_wr);

assign M_AXIS_AD5_data_V_1_load_B = (M_AXIS_AD5_data_V_1_sel_wr & M_AXIS_AD5_data_V_1_state_cmp_full);

assign M_AXIS_AD5_data_V_1_sel = M_AXIS_AD5_data_V_1_sel_rd;

assign M_AXIS_AD5_data_V_1_state_cmp_full = ((M_AXIS_AD5_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_AD5_data_V_1_vld_out = M_AXIS_AD5_data_V_1_state[1'b0];

assign M_AXIS_AD5_data_V_TDATA = M_AXIS_AD5_data_V_1_data_out;

assign M_AXIS_AD5_data_V_TVALID = M_AXIS_AD5_data_V_1_state[1'b0];

assign M_AXIS_AD6_data_V_1_ack_in = M_AXIS_AD6_data_V_1_state[1'b1];

assign M_AXIS_AD6_data_V_1_ack_out = M_AXIS_AD6_data_V_TREADY;

assign M_AXIS_AD6_data_V_1_load_A = (M_AXIS_AD6_data_V_1_state_cmp_full & ~M_AXIS_AD6_data_V_1_sel_wr);

assign M_AXIS_AD6_data_V_1_load_B = (M_AXIS_AD6_data_V_1_sel_wr & M_AXIS_AD6_data_V_1_state_cmp_full);

assign M_AXIS_AD6_data_V_1_sel = M_AXIS_AD6_data_V_1_sel_rd;

assign M_AXIS_AD6_data_V_1_state_cmp_full = ((M_AXIS_AD6_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_AD6_data_V_1_vld_out = M_AXIS_AD6_data_V_1_state[1'b0];

assign M_AXIS_AD6_data_V_TDATA = M_AXIS_AD6_data_V_1_data_out;

assign M_AXIS_AD6_data_V_TVALID = M_AXIS_AD6_data_V_1_state[1'b0];

assign M_AXIS_AD9_data_V_1_ack_in = M_AXIS_AD9_data_V_1_state[1'b1];

assign M_AXIS_AD9_data_V_1_ack_out = M_AXIS_AD9_data_V_TREADY;

assign M_AXIS_AD9_data_V_1_load_A = (M_AXIS_AD9_data_V_1_state_cmp_full & ~M_AXIS_AD9_data_V_1_sel_wr);

assign M_AXIS_AD9_data_V_1_load_B = (M_AXIS_AD9_data_V_1_sel_wr & M_AXIS_AD9_data_V_1_state_cmp_full);

assign M_AXIS_AD9_data_V_1_sel = M_AXIS_AD9_data_V_1_sel_rd;

assign M_AXIS_AD9_data_V_1_state_cmp_full = ((M_AXIS_AD9_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_AD9_data_V_1_vld_out = M_AXIS_AD9_data_V_1_state[1'b0];

assign M_AXIS_AD9_data_V_TDATA = M_AXIS_AD9_data_V_1_data_out;

assign M_AXIS_AD9_data_V_TVALID = M_AXIS_AD9_data_V_1_state[1'b0];

assign M_AXIS_VPVN_data_V_1_ack_in = M_AXIS_VPVN_data_V_1_state[1'b1];

assign M_AXIS_VPVN_data_V_1_ack_out = M_AXIS_VPVN_data_V_TREADY;

assign M_AXIS_VPVN_data_V_1_load_A = (M_AXIS_VPVN_data_V_1_state_cmp_full & ~M_AXIS_VPVN_data_V_1_sel_wr);

assign M_AXIS_VPVN_data_V_1_load_B = (M_AXIS_VPVN_data_V_1_sel_wr & M_AXIS_VPVN_data_V_1_state_cmp_full);

assign M_AXIS_VPVN_data_V_1_sel = M_AXIS_VPVN_data_V_1_sel_rd;

assign M_AXIS_VPVN_data_V_1_state_cmp_full = ((M_AXIS_VPVN_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign M_AXIS_VPVN_data_V_1_vld_out = M_AXIS_VPVN_data_V_1_state[1'b0];

assign M_AXIS_VPVN_data_V_TDATA = M_AXIS_VPVN_data_V_1_data_out;

assign M_AXIS_VPVN_data_V_TVALID = M_AXIS_VPVN_data_V_1_state[1'b0];

assign S_AXIS_TREADY = S_AXIS_id_V_0_state[1'b1];

assign S_AXIS_data_V_0_ack_in = S_AXIS_data_V_0_state[1'b1];

assign S_AXIS_data_V_0_load_A = (S_AXIS_data_V_0_state_cmp_full & ~S_AXIS_data_V_0_sel_wr);

assign S_AXIS_data_V_0_load_B = (S_AXIS_data_V_0_sel_wr & S_AXIS_data_V_0_state_cmp_full);

assign S_AXIS_data_V_0_sel = S_AXIS_data_V_0_sel_rd;

assign S_AXIS_data_V_0_state_cmp_full = ((S_AXIS_data_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign S_AXIS_data_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_data_V_0_vld_out = S_AXIS_data_V_0_state[1'b0];

assign S_AXIS_id_V_0_ack_in = S_AXIS_id_V_0_state[1'b1];

assign S_AXIS_id_V_0_load_A = (S_AXIS_id_V_0_state_cmp_full & ~S_AXIS_id_V_0_sel_wr);

assign S_AXIS_id_V_0_load_B = (S_AXIS_id_V_0_sel_wr & S_AXIS_id_V_0_state_cmp_full);

assign S_AXIS_id_V_0_sel = S_AXIS_id_V_0_sel_rd;

assign S_AXIS_id_V_0_state_cmp_full = ((S_AXIS_id_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign S_AXIS_id_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_id_V_0_vld_out = S_AXIS_id_V_0_state[1'b0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

always @ (*) begin
    ap_condition_664 = ((M_AXIS_VPVN_data_V_1_ack_in == 1'b0) | (M_AXIS_AD1_data_V_1_ack_in == 1'b0) | (M_AXIS_AD5_data_V_1_ack_in == 1'b0) | (M_AXIS_AD6_data_V_1_ack_in == 1'b0) | (M_AXIS_AD9_data_V_1_ack_in == 1'b0) | (M_AXIS_AD13_data_V_1_ack_in == 1'b0) | (M_AXIS_AD15_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign idTmp_V_fu_123_p1 = S_AXIS_id_V_0_data_out;

assign r_V_fu_137_p1 = $signed(tmp_1_fu_127_p4);

assign tmp_1_fu_127_p4 = {{S_AXIS_data_V_0_data_out[ap_const_lv32_F : ap_const_lv32_4]}};

endmodule //XADC_multiChannels_PreProcess
